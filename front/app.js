import express from 'express';
import path from 'path';
import favicon from 'serve-favicon';
import logger from 'morgan';
import cookieParser from 'cookie-parser';
import bodyParser from 'body-parser';
import session from 'express-session';
import sessionFileStore from 'session-file-store';

import moment from 'moment';

import './services/morgan/request-body';
import './services/morgan/request-params';

import routes from './routes/index';
import user from './routes/user';
import projects from './routes/projects';
/*
    DON'T MODIFY BELOW COMMENTS
    These comments are used for auto importing and registering routes that generated by 'router' subgenerator.
 */
/* auto import router */
/* end auto import router */

import constants from './services/constants';
import appConstants from './services/appConstants';
import wrapError from './services/wrapError';

import { realIp, validCaptcha, validMobileCaptcha } from './middlewares';

const FileStore = sessionFileStore(session);

const app = express();

// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'jade');

// uncomment after placing your favicon in /public
// app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));
app.use(logger(':method :url :status :response-time ms - :res[content-length] :request-body :request-params'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));
app.use(session({
    store: new FileStore(),
    secret: 'your secret'
}));

app.use(validCaptcha);
app.use(validMobileCaptcha);

app.use((req, res, next) => {
	res.locals.session = req.session;
	next();
});

app.use(realIp());

app.use('/', routes);
app.use('/user/', user);
app.use('/projects/', projects);
/* DON'T MODIFY BELOW COMMENTS */
/* auto register router */
/* end auto register router */

// catch 404 and forward to error handler
app.use(function (req, res, next) {
	const err = new Error('Not Found');
	err.status = 404;
	next(err);
});

// 设置Jade输出带格式的HTML
app.locals.pretty = true;
app.locals.moment = moment;
app.locals.constants = constants;
app.locals.appConstants = appConstants;
app.locals.helpers = {};

// error handlers

// development error handler
// will print stacktrace
if (app.get('env') === 'development') {
	app.use(function (err, req, res, next) {
		err = wrapError(err);
		res.status(err.status || 500);
		if (req.xhr) {
			res.send({
				error: {
					message: err.message,
					raw: err
				}
			});
		}
		else {
			res.render('error', {
				message: err.message,
				error: err
			});
		}
	});
}

// production error handler
// no stacktraces leaked to user
app.use(function (err, req, res, next) {
	err = wrapError(err);
	res.status(err.status || 500);
	if (req.xhr) {
		res.send({
			error: {
				message: err.message,
				raw: {}
			}
		});
	}
	else {
		res.render('error', {
			message: err.message,
			error: {}
		});
	}
});


module.exports = app;
